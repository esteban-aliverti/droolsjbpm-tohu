/*
 * Copyright 2009 Solnet Solutions Limited (http://www.solnetsolutions.co.nz/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Damon Horrell
 */
package org.tohu

import org.apache.commons.beanutils.PropertyUtils;

import org.tohu.domain.DomainModelSupport;

rule "derive answerType from the underlying domain model if it isn't specified"
when
	question : Question(questionId : id, answerType == null);
	association : DomainModelAssociation(questionId == questionId);
then
	Class propertyClass = PropertyUtils.getPropertyType(association.getObject(), association.getProperty());
	question.setAnswerType(DomainModelSupport.classToAnswerType(propertyClass));
	update(question);
end

rule "copy answers from the underlying domain model to the questions"
no-loop
when
	question : Question(questionId : id, answerType != null);
	association : DomainModelAssociation(questionId == questionId, lastAnswer == question.answer);
	obj : Object();
	eval(association.getObject() == obj);
then
	Object propertyValue = PropertyUtils.getProperty(association.getObject(), association.getProperty());
	Object answer = DomainModelSupport.objectToAnswer(propertyValue, question.getBasicAnswerType());
	if (answer == null ? question.getAnswer() != null : !answer.equals(question.getAnswer())) {
		question.setAnswer(answer);
		update(question);
		association.setLastAnswer(answer);
		update(association);
	}
end

rule "copy question answers to the underlying domain model"
no-loop
when
	question : Question(questionId : id, answerType != null, answer : answer);
	association : DomainModelAssociation(questionId == questionId, object : object, property : property, lastAnswer != answer);
then
	Class propertyClass = PropertyUtils.getPropertyType(object, property); 
	Object propertyValue = DomainModelSupport.answerToObject(question.getBasicAnswerType(), answer, propertyClass);
	Object oldPropertyValue = PropertyUtils.getProperty(object, property);
	PropertyUtils.setProperty(object, property, propertyValue);
	update(object);
	association.setLastAnswer(answer);
	update(association);
end
